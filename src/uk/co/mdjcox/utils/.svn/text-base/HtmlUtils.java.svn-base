/**
 * HtmlUtils.java
 * Author: Michael Cox
 * Date: 27-Jan-2009
 * Time: 18:09:14
 */


package uk.co.mdjcox.utils;

import javax.swing.text.html.HTMLEditorKit;
import javax.swing.text.html.parser.ParserDelegator;
import java.io.*;
import java.net.URL;
import java.net.URLConnection;
import java.nio.charset.Charset;
import java.util.ArrayList;


public class HtmlUtils {
    private static Parser parser = new Parser();
    private static final String DEFAULT_ENCODING = "UTF-8";

    public static String sampleFileString(String source) throws Exception {
        return downloadFileString(source, DEFAULT_ENCODING, true);

    }

    public static String sampleFileString(String source, String encoding) throws Exception {
        return downloadFileString(source, encoding, true);
    }
    
    public static String downloadFileString(String source, String encoding) throws Exception {
        return downloadFileString(source, encoding, false);
    }

    private static String downloadFileString(String source, String encoding, boolean sample) throws Exception {
        String nowPlaying = "";
        InputStream stream = null;
        BufferedInputStream bis = null;
        try {
            URL url = new URL(source);
            stream = url.openStream();
            bis = new BufferedInputStream(stream);
            byte[] buf = new byte[1024];
            int len;
            while ((len = bis.read(buf)) > 0) {
                nowPlaying += new String(buf, 0, len, Charset.forName(encoding));
                if (sample) break;
            }
            return nowPlaying;
        } catch (IOException ex) {
            if (!ex.getMessage().contains("Bogus chunk") && !ex.getMessage().contains("missing CR")) {
                throw ex;
            }
            return nowPlaying;
        } finally {
            if (bis != null) {
                bis.close();
            }
            if (stream != null) {
                stream.close();
            }
        }
    }


    public static String downloadFileString(String source) throws Exception {
        return downloadFileString(source, DEFAULT_ENCODING);
    }

    private static class Parser extends HTMLEditorKit.ParserCallback {
        StringBuffer s;

        public void handleText(char[] text, int pos) {
            s.append(text);
        }

        private String parse(String html) {
            StringReader in = new StringReader(html);
            s = new StringBuffer();
            ParserDelegator delegator = new ParserDelegator();
            // the third parameter is TRUE to ignore charset directive
            try {
                delegator.parse(in, this, Boolean.TRUE);
            } catch (IOException e) {
                s.append(html);
            }
            return s.toString();
        }
    }

    public static String removeHtml(String html) {
        html = html.replace('–', '-');
        html = html.replace('\n', ' ');
        html = html.replace('\r', ' ');
        html = html.trim();
        html = parser.parse(html);
        html = parser.parse(html);
        html = html.trim();
        return html;
    }

    /**
     * Downloads the file at the specfied URL and stores in in the specified
     * path.
     *
     * @param url  the URL of the resource to download
     * @param file the path to save the content at
     *
     * @throws IOException any exception thrown
     */
    public static void downloadFile(URL url, String file) throws IOException {
        URLConnection uc = url.openConnection();
        String contentType = uc.getContentType();
        int contentLength = uc.getContentLength();
        InputStream raw = uc.getInputStream();
        InputStream in = new BufferedInputStream(raw);
        FileOutputStream out = new FileOutputStream(file);

        byte[] buf = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) {
            out.write(buf, 0, len);
        }

        out.flush();
        in.close();
        out.close();
        TmpFileManager.addTmpFile(file);
    }

    public static String extractTo(String token, String fileStr) {
        if (token == null) {
            return fileStr;
        }
        if (token.equals("")) {
            return fileStr;
        }
        int index = fileStr.indexOf(token);
        if (index == -1) {
            return null;
        } else {
            return fileStr.substring(0, index);
        }
    }

    public static boolean hasToken(String token, String fileStr) {
        if (token == null) {
            return false;
        }
        if (token.equals("")) {
            return false;
        }
        int index = fileStr.indexOf(token);
        if (index == -1) {
            return false;
        } else {
            return true;
        }
    }

    public static String moveTo(String token, String fileStr) {
        if (token == null) {
            return fileStr;
        }
        if (token.equals("")) {
            return fileStr;
        }
        int index = fileStr.indexOf(token);
        if (index == -1) {
            return null;
        } else {
            return fileStr.substring(index + token.length());
        }
    }

    public static String getFileString(String htmlfile) throws IOException {
        return getFileString(htmlfile, null);
    }

    public static String getFileString(String htmlfile, String filter) throws IOException {
        File file = new File(htmlfile);
        if (!file.exists()) {
            throw new FileNotFoundException(file + " cannot be found");
        }
        BufferedReader in = new BufferedReader(new FileReader(file));
        if (!in.ready()) {
            throw new IOException();
        }
        String fileContent = "";
        String line = "";
        while ((line = in.readLine()) != null) {
            if (filter != null) {
                if (line.indexOf(filter) < 0) {
                    continue;
                }
            }
            fileContent = fileContent + line;

        }
        in.close();
        return fileContent;
    }

    public static String moveToInSteps(ArrayList<String> tokens, String fileStr) {
        try {
            for (String token : tokens) {
                fileStr = moveTo(token, fileStr);
                if (fileStr == null) {
                    return null;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return fileStr;
    }

    public static ArrayList<String> extractItem(String fileStr, ArrayList<String> start, String stop, boolean removeHtml) {
            fileStr = HtmlUtils.moveToInSteps(start, fileStr);
            if (fileStr == null || fileStr.equals("")) {
                return null;
            }

            String result = HtmlUtils.extractTo(stop, fileStr);
            if (result == null) {
                return null;
            }
            if (removeHtml) {
                result = HtmlUtils.removeHtml(result);
            }
            fileStr = HtmlUtils.moveTo( stop, fileStr);
            if (fileStr == null || fileStr.equals("")) {
                return null;
            }

        ArrayList<String> list = new ArrayList<String>();
        list.add(fileStr);
        list.add(result);
        return list;
    }


}
